// Base class
class Shape {
    // Method to be overridden
    double area() {
        System.out.println("Calculating area of a generic shape...");
        return 0;
    }

    // Overloaded method (different parameters)
    double area(double side) {
        System.out.println("Area of square with side " + side + " = ");
        return side * side;
    }
}

// Subclass 1: Circle
class Circle extends Shape {
    double radius;

    Circle(double r) {
        radius = r;
    }

    // Overriding area() method
    @Override
    double area() {
        return Math.PI * radius * radius;
    }
}

// Subclass 2: Rectangle
class Rectangle extends Shape {
    double length, width;

    Rectangle(double l, double w) {
        length = l;
        width = w;
    }

    // Overriding area() method
    @Override
    double area() {
        return length * width;
    }
}

// Main class
public class PolymorphismDemo {
    public static void main(String[] args) {
        Shape shape; // reference of parent class

        // Circle object
        shape = new Circle(5);
        System.out.println("Area of Circle: " + shape.area());

        // Rectangle object
        shape = new Rectangle(4, 6);
        System.out.println("Area of Rectangle: " + shape.area());

        // Method overloading demonstration
        Shape s = new Shape();
        System.out.println(s.area(4)); // Calls overloaded method for square
    }
}
